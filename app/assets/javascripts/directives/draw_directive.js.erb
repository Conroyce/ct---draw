app.directive("drawDirective", ["$interval", function($interval) {
  return {
    templateUrl: "<%= asset_path('templates/directives/draw_template.html') %>",
    link: function(scope, element, attr) {
      var dispatcher = new WebSocketRails('localhost:3000/websocket');
      var context = document.getElementById('canvas').getContext('2d');
      var clickX = [];
      var clickY = [];
      var clickDrag = [];
      var paint,
          color,
          data;

      var success = function(response) {
        console.log("response: ",response);
        clickX = response[0][0];
        clickY = response[1][0];
        clickDrag = response[2][0];
      };

      var setColor = function(c) {
        console.log('inside setcolor: ',c);
        color = "#008000";
      }

      dispatcher.trigger('showDraw',paint,success);
      dispatcher.trigger('getColor', paint, setColor, failure);

      dispatcher.bind('setColor', function(data) {
        console.log("setColor: ", data)
        color = data;
      });   

      dispatcher.bind('createDraw', function(data) {
        console.log('inside createDraw');
        success(data);
      });

      var failure = function(response) {
        console.log("failure: ", response);
      };

      var addClick = function(x, y, dragging) {
        if (!dragging) {
          data = { x:x, y:y };
        } else {
          data = { x:x, y:y, drag:dragging};
        }
        dispatcher.trigger('startDraw', data, success, failure);
      };

      var redraw = function() {
        console.log("color: ", color, "x: ",clickX,"y: ",clickY,"drag: ",clickDrag)
        context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas
        context.strokeStyle = color;
        context.lineJoin = "round";
        context.lineWidth = 5;
            
        for(var i=0; i < clickX.length; i++) {    
          context.beginPath();
          if(clickDrag[i] && i){
            context.moveTo(clickX[i-1], clickY[i-1]);
           }else{
             context.moveTo(clickX[i]-1, clickY[i]);
           }
           context.lineTo(clickX[i], clickY[i]);
           context.closePath();
           context.stroke();
        }
      }

      scope.clearDrawing = function() {
        dispatcher.trigger('clearDraw');
      };  

      // $interval(function() {
      //   dispatcher.trigger('showDraw',paint,success);  
      //   redraw();     
      // }, 1000);

      element.bind("mousedown", function(e) {
        var mouseX = e.pageX - this.offsetLeft;
        var mouseY = e.pageY - this.offsetTop;
        
        paint = true;
        addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop);
        redraw();
      });

      element.bind("mousemove", function(e) {
        if(paint) {
          addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop, true);
          redraw();
        }
      });

      element.bind("mouseup", function() {
        paint = false;
      });

      element.bind("mouseleave", function() {
        paint = false;
      });
    }
  }
}]);