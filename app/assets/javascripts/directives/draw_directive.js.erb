app.directive("drawDirective", ["$interval", function($interval) {
  return {
    templateUrl: "<%= asset_path('templates/directives/draw_template.html') %>",
    link: function(scope, element, attr) {
      var dispatcher = new WebSocketRails('hidden-reef-5800.herokuapp.com/websocket');
      var canvas = document.getElementById('canvas');
      var context = canvas.getContext('2d');
      var clickX = [];
      var clickY = [];
      var clickDrag = [];
      var color = [];
      var start = 0;
      var paint,
          data;

      var success = function(response) {
        console.log("response: ",response);
        if(clickX.length) {
          start = clickX.length - 1;
        }

        clickX = response[0][0];
        clickY = response[1][0];
        clickDrag = response[2][0];
        color = response[3];
      };

      var failure = function(response) {
        console.log("failure: ", response);
      };

      var addClick = function(x, y, dragging) {
        if (!dragging) {
          data = { x:x, y:y };
        } else {
          data = { x:x, y:y, drag:dragging};
        }
        dispatcher.trigger('Draw', data);
      };

      var redraw = function() {
        console.log("color: ", color, "x: ",clickX,"y: ",clickY,"drag: ",clickDrag)
        context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas 
        context.lineJoin = "round";
        context.lineCap = "round";
        context.lineWidth = 5;
            
        for(var i=0; i < clickX.length; i++) {
          context.strokeStyle = color[i];    
          context.beginPath();
          if(clickDrag[i] && i){
            context.moveTo(clickX[i-1], clickY[i-1]);
           }else{
             context.moveTo(clickX[i]-1, clickY[i]);
           }
           context.lineTo(clickX[i], clickY[i]);
           context.closePath();
           context.stroke();
        }
      };

      // deletes canvas websocket data
      scope.clearDrawing = function() {
        dispatcher.trigger('clearDraw');
      };  


      // initializes data with new connection
      dispatcher.trigger('initDraw',paint);  

      // creates new data point each time mouse clicks and drags
      dispatcher.bind('Draw', function(data) {
        console.log('inside Draw');
        success(data);
      });

      dispatcher.bind('curColor', function(data) {
        console.log('inside curcolor', data);
        if (data) {
          scope.myColor = {
            'display': 'inline-block',
            'background-color': data,
            'width':'15px',
            'height': '15px',
            'border-radius': '50%'
          }
          scope.bord = {
            'border': '1px solid '+data
          }
          scope.back = {
            'background-color': data
          }
          scope.main = {
            'background-color': 'white',
            'height': '100vh'
          }
        }  
      });

      // updates other connections in real time
      $interval(function() {
        dispatcher.trigger('showDraw',paint,success);  
        redraw();     
      }, 500);


      // EVENT LISTENERS

      canvas.addEventListener("mousedown", function(e) {
        var mouseX = e.pageX - this.offsetLeft;
        var mouseY = e.pageY - this.offsetTop;
        
        paint = true;
        addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop);
        redraw();
      });

      canvas.addEventListener("mousemove", function(e) {
        if(paint) {
          addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop, true);
          redraw();
        }
      });

      canvas.addEventListener("mouseup", function() {
        paint = false;
      });

      canvas.addEventListener("mouseleave", function() {
        paint = false;
      });
    }
  }
}]);